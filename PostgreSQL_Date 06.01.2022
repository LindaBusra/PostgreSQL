
DROP TABLE employees;
DROP TABLE addresses;
TRUNCATE TABLE employees;
TRUNCATE TABLE addresses;
delete from employees;
delete from addresses;

CREATE TABLE employees(
employee_id NUMERIC,
employee_first_name varchar(20),
employee_last_name varchar(20)
)

INSERT INTO employees VALUES(14, 'Chris', 'Tae');
INSERT INTO employees VALUES(11, 'John', 'Walker');
INSERT INTO employees VALUES(12, 'Amy', 'Star');
INSERT INTO employees VALUES(13, 'Brad', 'Pitt');
INSERT INTO employees VALUES(15, 'Chris', 'Way');



CREATE TABLE addresses
(
employee_id numeric,
street varchar(20),
city varchar(20),
state char(2),
zipcode char(5)
);

INSERT INTO addresses VALUES(11, '32nd Star 1234', 'Miami', 'FL', '33018');
INSERT INTO addresses VALUES(12, '23rd Rain 567', 'Jacksonville', 'FL', '32256');
INSERT INTO addresses VALUES(13, '5th Snow 765', 'Hialeah', 'VA', '20121');
INSERT INTO addresses VALUES(14, '3rd Man 12', 'Weston', 'MI', '12345');
INSERT INTO addresses VALUES(15, '11th Chris 12', 'St. Johns', 'FL', '32259');


select*from addresses;
select*from employees;


--ALIASES
--Select the employee_first_name and state for employee first name
--use "first name" as field name and for state use "employee state"
--as field

SELECT e.employee_first_name, a.state   -->employees.employee_first_name, addresses.state
FROM employees e, addresses a   -->employees AS e : employees e
WHERE e.employee_id=a.employee_id;

SELECT employee_first_name, state   
FROM employees , addresses  
WHERE employees.employee_id=addresses.employee_id;



--How to put multiple fields into a single field and use alisases for the field
--get employee_id  and use 'id' as field name ,get first name and last name put them into same field and use "full name" as field name

SELECT employee_id as id, employee_first_name ||' ' || employee_last_name AS "FULL NAME"
FROM employees;

SELECT employee_id AS id, employee_first_name || employee_last_name AS "FULL NAME"   -->without space
FROM employees;



--GROUP BY STATEMENT


DROP TABLE workers

CREATE TABLE workers
(
id integer,
name varchar(50),
state varchar(50),
salary smallint,
company varchar(20)
);


INSERT INTO workers VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO workers VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO workers VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO workers VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO workers VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO workers VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO workers VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');

SELECT * FROM workers;



--GROUP BY 
--Find the total salary for every employee
select name, sum(salary) as total_salary 
from workers 
group by name
ORDER BY total_salary DESC;   -->ORDER BY is used after GROUP BY!!! We should type the aliase as field name 
--in ORDER BY line after GROUP BY



--Find the number of employees per state in descending order by employee name
select state, count(name) as number_of_employees
from workers
group by state
order by number_of_employees desc


--Find the number of employees whose salary is more than 2000$ per company

select company, count(*) as number_of_worker   -->or count(name)
from workers
where salary>2000   --I say here condition, if there is no any other salary column I can use * above.
group by company;


--HAVING CLAUSE
--Find the total salary if it is greater than 2500$ for every employee

SELECT name, SUM(salary) AS "Total Salary" 
FROM workers
GROUP BY name
HAVING SUM(salary)>2500; --after group by, where cannot be used


select*from workers;



--GROUP BY statement groups rows that have the same values(name) into summary rows.
--After WHERE clause we can not use AGGREGATE functions;
--AVG(),COUNT(),MAX(),MIN(), SUM()


--Find the number of employees if it is more than 1 per state.
select state, count(name) as number_of_employees
from workers
group by state
having count(name)>1

--or

SELECT state, COUNT(state) AS "Number of Employees"
FROM workers
GROUP BY state
HAVING COUNT(state)>1; --HAVING is to filter the GROUP BY clause

--HAVING clause functionality is same with WHERE but it is used with aggregate functions after GROUP BY.

--Find the companies that pay a minimum value for salary which is more than 2000 for every company
SELECT company
FROM workers
GROUP BY company
HAVING MIN(salary)>2000;


--Find the maximum salary if it is less than 3000 for every state
SELECT state, MAX(salary) AS "MAXIMUM SALARY"
FROM workers
GROUP BY state
HAVING MAX(salary)<3000;


--UNION Operator:1)It is used for joining the result of 2 queries.
--               2)UNION operator returns unique records everytime, if there are repeated records it removes the repeated ones
--               3)By using UNION operator we are able to put different fields into a single field like in the following
--               example.
--               4) When you put different field into  a single field by using UNION operator, field must have same data
--                type in the same size.


--Find the state or employee names whose salary is greater than 3000, less than 2000 without any duplication.
--Find the states where salary is greater than 3000 and workers with a salary of less than 2000

SELECT state AS "State or Employee Name", salary
FROM workers
WHERE salary>3000

UNION

SELECT name AS "State or Employee Name", salary
FROM workers
WHERE salary<2000;








/*============================= GROUP BY =====================================

    GROUP BY cümleciği bir SELECT ifadesinde satırları, sutunların değerlerine 
    göre özet olarak gruplamak için kullanılır. 
   
    GROUP BY cümleceği her grup başına bir satır döndürür. 
    
    GROUP BY genelde, AVG(),COUNT(),MAX(),MIN() ve SUM() gibi aggregate 
    fonksiyonları ile birlikte kullanılır.
==============================================================================*/ 

use test;
    
CREATE TABLE manav 
(
	isim varchar(50), 
	urun_adi varchar(50), 
	urun_miktari int 
);
    
INSERT INTO manav VALUES( 'Ali', 'Elma', 5);
INSERT INTO manav VALUES( 'Ayse', 'Armut', 3);
INSERT INTO manav VALUES( 'Veli', 'Elma', 2);
INSERT INTO manav VALUES( 'Hasan', 'Uzum', 4);
INSERT INTO manav VALUES( 'Ali', 'Armut', 2);
INSERT INTO manav VALUES( 'Ayse', 'Elma', 3);
INSERT INTO manav VALUES( 'Veli', 'Uzum', 4);
INSERT INTO manav VALUES( 'Ali', 'Armut', 2);
INSERT INTO manav VALUES( 'Veli', 'Elma', 3);
INSERT INTO manav VALUES( 'Ayse', 'Uzum', 4);
INSERT INTO manav VALUES( 'Ali', null, 2);

select * from manav;

-- SORU1: kisi ismine göre satılan toplam meyve miktarlarını gösteren sorguyu yazınız.
select isim, sum(urun_miktari) as toplam_meyve_miktari
from manav
group by isim;

-- SORU2: satılan meyve türüne (urun_adi) göre urun alan kişi sayısını gösteren
-- sorguyu yazınız. NULL olarak girilen meyveyi listelesin.

select urun_adi,count(isim) as urun_alan_kisi_sayisi
from manav
where urun_adi is not null
group by urun_adi



-- SORU3: satılan meyve türüne (urun_adi) göre satılan (urun_miktari )MIN ve 
-- MAX urun miktarlarini, MAX urun miktarina göre sıralayarak listeyen sorguyu yazınız.

select urun_adi, min(urun_miktari) as min, max(urun_miktari) as max from manav
where urun_adi is not null group by urun_adi order by max(urun_miktari) desc;


-- SORU4: kisi ismine ve urun adına göre satılan ürünlerin toplamını gruplandıran ve isme göre ters sırasıda listeyen sorguyu yazınız.








select isim,urun_adi, sum(urun_miktari) from manav group by isim, urun_adi order by isim desc;



select*from friends_of_pickles
order by height_cm desc  limit 1;


