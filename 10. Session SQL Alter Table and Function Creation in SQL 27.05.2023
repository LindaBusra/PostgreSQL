--10. Session SQL Alter Table and Function Creation in SQL 27.05.2023



SELECT * FROM  workers;

--Add UNIQUE constraint for worker_address in the workers table
ALTER TABLE workers
ADD CONSTRAINT worker_address_unique UNIQUE (worker_address); --UNIQUE constraints accepts multiple null


--ALTER TABLE workers change the constraint of workers_address to DEFAULT value
ALTER TABLE workers
ADD CONSTRAINT worker_address_unique UNIQUE



--ALTER TABLE workers change the constraint of workers_address to DEFAULT value
SELECT * FROM workers;
ALTER TABLE workers
ADD workers_address TEXT DEFAULT 'Miami, FL, US';

--When we add a constraint into a field we should be careful about the existing

ALTER TABLE workers
ADD CONSTRAINT workers_address_unique UNIQUE (worker_address);	--UNIQUE constraint accepts multiple null.


--Change the data type of worker_address to CHAR(5);
ALTER TABLE workers
ALTER COLUMN workers_address TYPE CHAR(5);	

--When we modify a field new size must be greater than or equal to the maximum value of existing value.

INSERT INTO workers (worker_address) VALUES ('Miami');
SELECT * FROM workers;




--How to use Check Constraint
--A check constraint allows you to specify a condition on each row in a table.
--A check constraint can be defined in either a SQL CREATE TABLE statement or a SQL ALTER TABLE statement

CREATE TABLE suppliers(

	supplier_id numeric(4),
	supplier_name varchar(50),
	CONSTRAINT check_supplier_id
	CHECK (supplier_id BETWEEN 100 AND 9999)
);

--This constraint ensures that the supplier_id field contains values between 100 and 9999

INSERT INTO suppliers VALUES(105, 'Emily');
INSERT INTO suppliers VALUES(10, 'Emily');  --Error, because of condition -->supplier_id BETWEEN 100 AND 9999

SELECT*FROM suppliers;
DROP TABLE suppliers;




CREATE TABLE suppliers(

	supplier_id numeric(4),
	supplier_name varchar(50),
	CONSTRAINT check_supplier_name
	CHECK (supplier_name=upper(supplier_name))
);

--This constraint ensures that the supplier_id field contains values between 100 and 9999

INSERT INTO suppliers VALUES(105, 'Emily');  --Error, because of condition -->supplier_name=upper(supplier_name)
INSERT INTO suppliers VALUES(10, 'EMILY');


--****************************************************************************************************************************


--How to write functions in SQL:

--A function is created to do some tasks faster and easier.
--A function can be created for CRUD
--In SQL, every function returns data with a return type.
--Operations that do not return a data we call this operation return type as "Procedure(like void in JAVA)".

CREATE OR REPLACE FUNCTION addF(x NUMERIC, y NUMERIC)
RETURNS NUMERIC
LANGUAGE plpgsql
AS
$$		--stand for {} in java, start-end of function
BEGIN

RETURN x+y;

END
$$	

SELECT*FROM addF(3, 4);
SELECT*FROM addF(3, 4) AS Addition;
SELECT addF(3, 4) AS Addition;



--Write a function that calculates the volume of the cone.
CREATE OR REPLACE FUNCTION volumeOfCone(r NUMERIC, h NUMERIC)
RETURNS NUMERIC
LANGUAGE plpgsql
AS
$$
BEGIN

RETURN r*r*h*3.14/3;

END
$$

SELECT volumeOfCone(2,4) AS volumeOfCone;
SELECT to_char(volumeOfCone(2, 4), '00.0');		--00.0  two decimal in first part, en decimal in second part







